{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = JSON.parse(JSON.stringify(initialState));\n        this.board = JSON.parse(JSON.stringify(initialState));\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for (const row of this.board){\n            const nonZeroNumber = row.filter((x)=>x !== 0);\n            const result = [];\n            let i = 0;\n            while(i < nonZeroNumber.length)if (i < nonZeroNumber.length - 1 && nonZeroNumber[i] === nonZeroNumber[i + 1]) {\n                result.push(nonZeroNumber[i] * 2);\n                this.score += nonZeroNumber[i] * 2;\n                i += 2;\n            } else {\n                result.push(nonZeroNumber[i]);\n                i++;\n            }\n            while(result.length < row.length)result.push(0);\n            if (result.toString() !== row.toString()) moved = true;\n            row.splice(0, row.length, ...result);\n        }\n        if (moved) {\n            this.addNumber();\n            this.checkGameOver();\n        }\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for (const row of this.board){\n            const nonZeroNumber = row.filter((x)=>x !== 0);\n            const result = [];\n            let i = 0;\n            while(i < nonZeroNumber.length)if (i < nonZeroNumber.length - 1 && nonZeroNumber[i] === nonZeroNumber[i + 1]) {\n                result.push(nonZeroNumber[i] * 2);\n                this.score += nonZeroNumber[i] * 2;\n                i += 2;\n            } else {\n                result.push(nonZeroNumber[i]);\n                i++;\n            }\n            while(result.length < row.length)result.unshift(0);\n            if (result.toString() !== row.toString()) moved = true;\n            row.splice(0, row.length, ...result);\n        }\n        if (moved) {\n            this.addNumber();\n            this.checkGameOver();\n        }\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        const transposed = [];\n        for(let col = 0; col < this.board[0].length; col++){\n            const newRow = this.board.map((row)=>row[col]);\n            transposed.push(newRow);\n        }\n        for (const col of transposed){\n            const nonZeroNumberCol = col.filter((x)=>x !== 0);\n            const result = [];\n            let i = 0;\n            while(i < nonZeroNumberCol.length)if (i < nonZeroNumberCol.length - 1 && nonZeroNumberCol[i] === nonZeroNumberCol[i + 1]) {\n                result.push(nonZeroNumberCol[i] * 2);\n                this.score += nonZeroNumberCol[i] * 2;\n                i += 2;\n            } else {\n                result.push(nonZeroNumberCol[i]);\n                i++;\n            }\n            while(result.length < col.length)result.push(0);\n            if (!moved && col.some((value, index)=>value !== result[index])) moved = true;\n            col.splice(0, col.length, ...result);\n        }\n        this.board = transposed[0].map((_, i)=>transposed.map((row)=>row[i]));\n        if (moved) {\n            this.addNumber();\n            this.checkGameOver();\n        }\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        const transposed = [];\n        for(let col = 0; col < this.board[0].length; col++){\n            const newRow = this.board.map((row)=>row[col]);\n            transposed.push(newRow);\n        }\n        for (const col of transposed){\n            const nonZeroNumberCol = col.filter((x)=>x !== 0);\n            const result = [];\n            let i = 0;\n            while(i < nonZeroNumberCol.length)if (i < nonZeroNumberCol.length - 1 && nonZeroNumberCol[i] === nonZeroNumberCol[i + 1]) {\n                result.push(nonZeroNumberCol[i] * 2);\n                this.score += nonZeroNumberCol[i] * 2;\n                i += 2;\n            } else {\n                result.push(nonZeroNumberCol[i]);\n                i++;\n            }\n            while(result.length < col.length)result.unshift(0);\n            if (!moved && col.some((value, index)=>value !== result[index])) moved = true;\n            col.splice(0, col.length, ...result);\n        }\n        this.board = transposed[0].map((_, i)=>transposed.map((row)=>row[i]));\n        if (moved) {\n            this.addNumber();\n            this.checkGameOver();\n        }\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = \"playing\";\n        this.addNumber();\n        this.addNumber();\n    }\n    addNumber() {\n        const emptyCells = [];\n        this.board.forEach((row, rowIndex)=>{\n            row.forEach((cell, colIndex)=>{\n                if (cell === 0) emptyCells.push({\n                    row: rowIndex,\n                    col: colIndex\n                });\n            });\n        });\n        if (emptyCells.length > 0) {\n            const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            const randomValue = Math.random() < 0.9 ? 2 : 4;\n            this.board[randomCell.row][randomCell.col] = randomValue;\n        }\n    }\n    restart() {\n        this.board = JSON.parse(JSON.stringify(this.initialState));\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    checkGameOver() {\n        if (this.board.some((row)=>row.includes(2048))) {\n            this.status = \"win\";\n            return;\n        }\n        if (this.board.some((row)=>row.includes(0))) return false;\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const value = this.board[row][col];\n            if (row > 0 && this.board[row - 1][col] === value || row < 3 && this.board[row + 1][col] === value || col > 0 && this.board[row][col - 1] === value || col < 3 && this.board[row][col + 1] === value) return false;\n        }\n        this.status = \"lose\";\n        return true;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nfunction $09e991522ca7e64e$var$renderBoard() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    const rows = $09e991522ca7e64e$var$gameField.querySelectorAll(\".field-row\");\n    rows.forEach((row, rowIndex)=>{\n        const cells = row.querySelectorAll(\".field-cell\");\n        cells.forEach((cell, cellIndex)=>{\n            const value = state[rowIndex][cellIndex];\n            cell.textContent = value === 0 ? \"\" : value;\n            cell.className = \"field-cell\";\n            if (value !== 0) cell.classList.add(`field-cell--${value}`);\n        });\n    });\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (gameStatus === \"win\") {\n        $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    } else if (gameStatus === \"lose\") {\n        $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    } else {\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    }\n}\ndocument.addEventListener(\"keydown\", (keyboardEvent)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    switch(keyboardEvent.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$renderBoard();\n});\nfunction $09e991522ca7e64e$var$startGame() {\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$renderBoard();\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n    $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n}\nfunction $09e991522ca7e64e$var$restartGame() {\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$renderBoard();\n    $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n    $09e991522ca7e64e$var$startButton.classList.remove(\"restart\");\n    $09e991522ca7e64e$var$startButton.classList.add(\"start\");\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.classList.contains(\"start\")) $09e991522ca7e64e$var$startGame();\n    else $09e991522ca7e64e$var$restartGame();\n});\n$09e991522ca7e64e$var$renderBoard();\n\n\n//# sourceMappingURL=index.a815124f.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\n\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst startButton = document.querySelector('.button.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nfunction renderBoard() {\n  const state = game.getState();\n\n  const rows = gameField.querySelectorAll('.field-row');\n\n  rows.forEach((row, rowIndex) => {\n    const cells = row.querySelectorAll('.field-cell');\n\n    cells.forEach((cell, cellIndex) => {\n      const value = state[rowIndex][cellIndex];\n\n      cell.textContent = value === 0 ? '' : value;\n      cell.className = 'field-cell';\n\n      if (value !== 0) {\n        cell.classList.add(`field-cell--${value}`);\n      }\n    });\n  });\n\n  gameScore.textContent = game.getScore();\n\n  const gameStatus = game.getStatus();\n\n  if (gameStatus === 'win') {\n    messageWin.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n  } else if (gameStatus === 'lose') {\n    messageLose.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n  } else {\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  }\n}\n\ndocument.addEventListener('keydown', (keyboardEvent) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (keyboardEvent.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  renderBoard();\n});\n\nfunction startGame() {\n  game.start();\n  renderBoard();\n\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  startButton.textContent = 'Restart';\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n}\n\nfunction restartGame() {\n  game.restart();\n  renderBoard();\n\n  messageStart.classList.remove('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  startButton.textContent = 'Start';\n  startButton.classList.remove('restart');\n  startButton.classList.add('start');\n}\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    startGame();\n  } else {\n    restartGame();\n  }\n});\n\nrenderBoard();\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = JSON.parse(JSON.stringify(initialState));\n    this.board = JSON.parse(JSON.stringify(initialState));\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (const row of this.board) {\n      const nonZeroNumber = row.filter((x) => x !== 0);\n      const result = [];\n      let i = 0;\n\n      while (i < nonZeroNumber.length) {\n        if (\n          i < nonZeroNumber.length - 1 &&\n          nonZeroNumber[i] === nonZeroNumber[i + 1]\n        ) {\n          result.push(nonZeroNumber[i] * 2);\n          this.score += nonZeroNumber[i] * 2;\n          i += 2;\n        } else {\n          result.push(nonZeroNumber[i]);\n          i++;\n        }\n      }\n\n      while (result.length < row.length) {\n        result.push(0);\n      }\n\n      if (result.toString() !== row.toString()) {\n        moved = true;\n      }\n      row.splice(0, row.length, ...result);\n    }\n\n    if (moved) {\n      this.addNumber();\n      this.checkGameOver();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (const row of this.board) {\n      const nonZeroNumber = row.filter((x) => x !== 0);\n      const result = [];\n      let i = 0;\n\n      while (i < nonZeroNumber.length) {\n        if (\n          i < nonZeroNumber.length - 1 &&\n          nonZeroNumber[i] === nonZeroNumber[i + 1]\n        ) {\n          result.push(nonZeroNumber[i] * 2);\n          this.score += nonZeroNumber[i] * 2;\n          i += 2;\n        } else {\n          result.push(nonZeroNumber[i]);\n          i++;\n        }\n      }\n\n      while (result.length < row.length) {\n        result.unshift(0);\n      }\n\n      if (result.toString() !== row.toString()) {\n        moved = true;\n      }\n      row.splice(0, row.length, ...result);\n    }\n\n    if (moved) {\n      this.addNumber();\n      this.checkGameOver();\n    }\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    const transposed = [];\n\n    for (let col = 0; col < this.board[0].length; col++) {\n      const newRow = this.board.map((row) => row[col]);\n\n      transposed.push(newRow);\n    }\n\n    for (const col of transposed) {\n      const nonZeroNumberCol = col.filter((x) => x !== 0);\n      const result = [];\n      let i = 0;\n\n      while (i < nonZeroNumberCol.length) {\n        if (\n          i < nonZeroNumberCol.length - 1 &&\n          nonZeroNumberCol[i] === nonZeroNumberCol[i + 1]\n        ) {\n          result.push(nonZeroNumberCol[i] * 2);\n          this.score += nonZeroNumberCol[i] * 2;\n          i += 2;\n        } else {\n          result.push(nonZeroNumberCol[i]);\n          i++;\n        }\n      }\n\n      while (result.length < col.length) {\n        result.push(0);\n      }\n\n      if (!moved && col.some((value, index) => value !== result[index])) {\n        moved = true;\n      }\n      col.splice(0, col.length, ...result);\n    }\n\n    this.board = transposed[0].map((_, i) => transposed.map((row) => row[i]));\n\n    if (moved) {\n      this.addNumber();\n      this.checkGameOver();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    const transposed = [];\n\n    for (let col = 0; col < this.board[0].length; col++) {\n      const newRow = this.board.map((row) => row[col]);\n\n      transposed.push(newRow);\n    }\n\n    for (const col of transposed) {\n      const nonZeroNumberCol = col.filter((x) => x !== 0);\n      const result = [];\n      let i = 0;\n\n      while (i < nonZeroNumberCol.length) {\n        if (\n          i < nonZeroNumberCol.length - 1 &&\n          nonZeroNumberCol[i] === nonZeroNumberCol[i + 1]\n        ) {\n          result.push(nonZeroNumberCol[i] * 2);\n          this.score += nonZeroNumberCol[i] * 2;\n          i += 2;\n        } else {\n          result.push(nonZeroNumberCol[i]);\n          i++;\n        }\n      }\n\n      while (result.length < col.length) {\n        result.unshift(0);\n      }\n\n      if (!moved && col.some((value, index) => value !== result[index])) {\n        moved = true;\n      }\n\n      col.splice(0, col.length, ...result);\n    }\n\n    this.board = transposed[0].map((_, i) => transposed.map((row) => row[i]));\n\n    if (moved) {\n      this.addNumber();\n      this.checkGameOver();\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.addNumber();\n    this.addNumber();\n  }\n\n  addNumber() {\n    const emptyCells = [];\n\n    this.board.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          emptyCells.push({ row: rowIndex, col: colIndex });\n        }\n      });\n    });\n\n    if (emptyCells.length > 0) {\n      const randomCell =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n      const randomValue = Math.random() < 0.9 ? 2 : 4;\n\n      this.board[randomCell.row][randomCell.col] = randomValue;\n    }\n  }\n\n  restart() {\n    this.board = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  checkGameOver() {\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n\n      return;\n    }\n\n    if (this.board.some((row) => row.includes(0))) {\n      return false;\n    }\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const value = this.board[row][col];\n\n        if (\n          (row > 0 && this.board[row - 1][col] === value) ||\n          (row < 3 && this.board[row + 1][col] === value) ||\n          (col > 0 && this.board[row][col - 1] === value) ||\n          (col < 3 && this.board[row][col + 1] === value)\n        ) {\n          return false;\n        }\n      }\n    }\n\n    this.status = 'lose';\n\n    return true;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["a","$a5fd07fa01589658$exports","$09e991522ca7e64e$var$game","constructor","initialState","JSON","parse","stringify","board","score","status","moveLeft","moved","row","nonZeroNumber","filter","x","result","i","length","push","toString","splice","addNumber","checkGameOver","moveRight","unshift","moveUp","transposed","col","newRow","map","nonZeroNumberCol","some","value","index","_","moveDown","getScore","getState","getStatus","start","emptyCells","forEach","rowIndex","cell","colIndex","randomCell","Math","floor","random","randomValue","restart","includes","__esModule","default","$09e991522ca7e64e$var$gameField","document","querySelector","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$renderBoard","state","rows","querySelectorAll","cells","cellIndex","textContent","className","classList","add","gameStatus","remove","addEventListener","keyboardEvent","key","contains"],"version":3,"file":"index.a815124f.js.map"}